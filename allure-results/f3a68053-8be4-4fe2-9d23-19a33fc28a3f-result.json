{"name": "test_create_user_invalid_json", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 'data' to be {'message': 'Error occurred while parsing request parameters'}, got {'message': 'Authentication failed'}.", "trace": "def test_create_user_invalid_json():\n        \"\"\"Test case for creating a user - negative case with invalid JSON syntax.\"\"\"\n        step_name = \"Create User - Invalid JSON\"\n        # request_data = \"\"\"{\n        #     \"name\": \"John Doe\",\n        #     \"email\": \"john.doe@example.com\",\n        #     \"gender\": \"male\",\n        #     \"status\": \"active\",\n        # }\"\"\"\n    \n        request_data = {\n            \"email\": \"7Z96utZH@example.com\",\n            \"name\": \"7Z96utZH\",\n            \"gender\": \"male\",\n            \"status\": \"inactive\",\n        }\n    \n        log_request_data(request_data, step_name)\n    \n        response = requests.post(f\"{BASE_URL}/users\", data=request_data, headers=headers)\n    \n        log_response_data(response, step_name)\n    \n        expected_status_code = 200\n        expected_values = {\n            \"code\": 401,\n            \"meta\": None,\n            \"data\": {\n                \"message\": \"Error occurred while parsing request parameters\"\n            }\n        }\n    \n>       log_and_assert(response, expected_status_code, expected_values)\n\nsrc/test_api.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, expected_status = 200\nexpected_values = {'code': 401, 'data': {'message': 'Error occurred while parsing request parameters'}, 'meta': None}\n\n    def log_and_assert(response, expected_status, expected_values):\n        \"\"\"\n        Log response and assert expected values.\n    \n        Parameters:\n        - response: The HTTP response object.\n        - expected_status: The expected HTTP status code.\n        - expected_values: A dictionary of expected values to assert in the response JSON.\n        \"\"\"\n    \n        log_response_data(response)\n        response_json = response.json()\n    \n        assert response.status_code == expected_status, f\"Expected status code {expected_status}, got {response.status_code}.\"\n    \n        for key, expected_value in expected_values.items():\n            actual_value = response_json.get(key)\n>           assert actual_value == expected_value, f\"Expected '{key}' to be {expected_value}, got {actual_value}.\"\nE           AssertionError: Expected 'data' to be {'message': 'Error occurred while parsing request parameters'}, got {'message': 'Authentication failed'}.\n\nsrc/utils/logger_validator.py:30: AssertionError"}, "description": "Test case for creating a user - negative case with invalid JSON syntax.", "steps": [{"name": "Request for Create User - Invalid JSON", "status": "passed", "attachments": [{"name": "Create User - Invalid JSON", "source": "feb15025-bc43-43a4-bbeb-f54b1ead4887-attachment.json", "type": "application/json"}], "start": 1729049309537, "stop": 1729049309537}, {"name": "Response for Create User - Invalid JSON", "status": "passed", "attachments": [{"name": "Create User - Invalid JSON", "source": "444c7a13-7f00-4973-ae46-19b588c5a3fa-attachment.json", "type": "application/json"}], "start": 1729049309871, "stop": 1729049309871}, {"name": "Response for Response", "status": "passed", "attachments": [{"name": "Response", "source": "a49617ff-a40f-46f5-b09b-b8abdae15e19-attachment.json", "type": "application/json"}], "start": 1729049309871, "stop": 1729049309872}], "start": 1729049309537, "stop": 1729049309872, "uuid": "f9dd0622-3318-4a65-b036-38ce896847e2", "historyId": "7ca760caa22fab52195aec27251ef5d5", "testCaseId": "7ca760caa22fab52195aec27251ef5d5", "fullName": "src.test_api#test_create_user_invalid_json", "labels": [{"name": "parentSuite", "value": "src"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "Aras-MacBook-Air.local"}, {"name": "thread", "value": "62551-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.test_api"}]}